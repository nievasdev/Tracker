Metadata-Version: 2.4
Name: traker
Version: 0.1.0
Summary: Task tracking application with GTK interface
Author: User
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: PyGObject>=3.42.0
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Traker - Task Tracking Application

A Python GTK application for tracking tasks with built-in time management following productivity principles.

## Features

- **Task Management**: Create, edit, and manage tasks with automatic subdivision
- **Subtask Creation**: Break down tasks into smaller, manageable pieces (max 50 minutes each)
- **Context Recovery**: Automatic 25-minute "context" tasks when resuming paused work
- **Time Blocks**: Work sessions start at 30 minutes and can extend to 50 minutes
- **Break Management**: Built-in 10-minute break timer
- **Task Persistence**: Tasks are automatically saved and restored between sessions
- **Progress Tracking**: Visual progress indicators for tasks and subtasks

## Requirements

- Python 3.7+
- PyGObject (GTK 4)

## Installation

1. Clone or download the project
2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

## Usage

Run the application:

```bash
python run.py
```

Or make it executable and run directly:

```bash
chmod +x run.py
./run.py
```

## Key Concepts

### Task Subdivision
- Every new task automatically gets a "subdivision" subtask
- This forces you to break down work into smaller pieces
- Maximum subtask duration is 50 minutes

### Context Recovery
- When resuming a paused task, a 25-minute "Context Recovery" subtask is automatically added
- This helps you get back into the flow of what you were working on

### Time Management
- Work sessions can be 25 or 50 minutes
- Break timer is always 10 minutes
- The system tracks when you need breaks based on work time

### Task Flow
1. Create a new task
2. The system automatically adds a "subdivision" subtask
3. Complete the subdivision to plan your work
4. Add specific subtasks as needed
5. Work in 25-50 minute focused blocks
6. Take 10-minute breaks as suggested

## File Structure

```
Traker/
├── src/
│   └── traker/
│       ├── __init__.py
│       ├── main.py           # Application entry point
│       ├── task.py           # Task model and logic
│       ├── task_manager.py   # Task management operations
│       └── ui/
│           ├── __init__.py
│           ├── main_window.py    # Main application window
│           └── timer_widget.py   # Timer functionality
├── requirements.txt
├── run.py               # Executable script
└── README.md
```

## Data Storage

Tasks are automatically saved to `~/.traker_tasks.json` and restored when the application starts.
